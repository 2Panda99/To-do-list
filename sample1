<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StudyHub Pro - Student Productivity Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --secondary: #f1f5f9;
            --accent: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --text: #1e293b;
            --text-light: #64748b;
            --bg: #ffffff;
            --card-bg: #ffffff;
            --border: #e2e8f0;
            --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
        }

        [data-theme="dark"] {
            --text: #f8fafc;
            --text-light: #cbd5e1;
            --bg: #0f172a;
            --card-bg: #1e293b;
            --border: #334155;
            --secondary: #1e293b;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            transition: all 0.3s ease;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        /* Navigation */
        .nav {
            background: var(--card-bg);
            border-bottom: 1px solid var(--border);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            color: var(--text-light);
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            transition: all 0.2s;
        }

        .nav-links a:hover, .nav-links a.active {
            background: var(--primary);
            color: white;
        }

        .theme-toggle {
            background: var(--secondary);
            border: none;
            padding: 0.5rem;
            border-radius: 0.5rem;
            cursor: pointer;
            font-size: 1.2rem;
        }

        /* Main Layout */
        .main {
            padding: 2rem 0;
        }

        .page {
            display: none;
        }

        .page.active {
            display: block;
        }

        /* Cards */
        .card {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 0.75rem;
            padding: 1.5rem;
            box-shadow: var(--shadow);
        }

        .card-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        /* Grid Layout */
        .grid {
            display: grid;
            gap: 1.5rem;
        }

        .grid-2 {
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }

        .grid-3 {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 0.75rem;
            padding: 1.5rem;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary);
        }

        .stat-label {
            color: var(--text-light);
            font-size: 0.875rem;
        }

        /* Task List */
        .task-form {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .task-input {
            flex: 1;
            min-width: 200px;
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: 0.5rem;
            background: var(--bg);
            color: var(--text);
        }

        .task-select {
            padding: 0.75rem;
            border: 1px solid var(--border);
            border-radius: 0.5rem;
            background: var(--bg);
            color: var(--text);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
        }

        .btn-success {
            background: var(--accent);
            color: white;
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }

        .task-list {
            list-style: none;
        }

        .task-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            border: 1px solid var(--border);
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            background: var(--card-bg);
        }

        .task-item.completed {
            opacity: 0.6;
        }

        .task-item.completed .task-text {
            text-decoration: line-through;
        }

        .task-checkbox {
            width: 1.25rem;
            height: 1.25rem;
        }

        .task-text {
            flex: 1;
        }

        .task-subject {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .subject-math { background: #ddd6fe; color: #7c3aed; }
        .subject-science { background: #dcfce7; color: #16a34a; }
        .subject-english { background: #fef3c7; color: #d97706; }
        .subject-history { background: #fecaca; color: #dc2626; }

        .task-priority {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .priority-high { background: #fecaca; color: #dc2626; }
        .priority-medium { background: #fef3c7; color: #d97706; }
        .priority-low { background: #dcfce7; color: #16a34a; }

        .task-due {
            font-size: 0.875rem;
            color: var(--text-light);
        }

        .task-actions {
            display: flex;
            gap: 0.5rem;
        }

        /* Timer */
        .timer-container {
            text-align: center;
            padding: 2rem;
        }

        .timer-display {
            font-size: 4rem;
            font-weight: 700;
            color: var(--primary);
            margin: 1rem 0;
            font-family: 'Courier New', monospace;
        }

        .timer-controls {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin: 1rem 0;
        }

        .session-log {
            margin-top: 2rem;
            max-height: 200px;
            overflow-y: auto;
        }

        .session-item {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem;
            border-bottom: 1px solid var(--border);
        }

        /* Calendar */
        .calendar {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background: var(--border);
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .calendar-header {
            background: var(--primary);
            color: white;
            padding: 1rem;
            text-align: center;
            font-weight: 600;
        }

        .calendar-day {
            background: var(--card-bg);
            padding: 1rem;
            min-height: 100px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .calendar-day:hover {
            background: var(--secondary);
        }

        .calendar-day.today {
            background: var(--primary);
            color: white;
        }

        .calendar-day.has-tasks {
            border-left: 4px solid var(--accent);
        }

        .day-number {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .day-tasks {
            font-size: 0.75rem;
            color: var(--text-light);
        }

        /* Progress Bars */
        .progress-bar {
            width: 100%;
            height: 0.5rem;
            background: var(--secondary);
            border-radius: 0.25rem;
            overflow: hidden;
            margin: 0.5rem 0;
        }

        .progress-fill {
            height: 100%;
            background: var(--accent);
            transition: width 0.3s ease;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }
            
            .task-form {
                flex-direction: column;
            }
            
            .timer-display {
                font-size: 2.5rem;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .fade-in {
            animation: fadeIn 0.3s ease;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: var(--card-bg);
            padding: 2rem;
            border-radius: 0.75rem;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-light);
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="nav">
        <div class="container">
            <div class="nav-content">
                <div class="logo">📚 StudyHub Pro</div>
                <ul class="nav-links">
                    <li><a href="#" onclick="showPage('dashboard')" class="active">Dashboard</a></li>
                    <li><a href="#" onclick="showPage('planner')">Planner</a></li>
                    <li><a href="#" onclick="showPage('subjects')">Subjects</a></li>
                    <li><a href="#" onclick="showPage('reports')">Reports</a></li>
                    <li><a href="#" onclick="showPage('settings')">Settings</a></li>
                </ul>
                <button class="theme-toggle" onclick="toggleTheme()">🌙</button>
            </div>
        </div>
    </nav>

    <main class="main">
        <div class="container">
            <!-- Dashboard Page -->
            <div id="dashboard" class="page active">
                <!-- Stats Overview -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number" id="totalTasks">0</div>
                        <div class="stat-label">Total Tasks</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="completedTasks">0</div>
                        <div class="stat-label">Completed</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="focusTime">0h</div>
                        <div class="stat-label">Focus Time Today</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="streakDays">0</div>
                        <div class="stat-label">Day Streak</div>
                    </div>
                </div>

                <div class="grid grid-2">
                    <!-- Task Management -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">📝 Tasks & Assignments</h2>
                            <button class="btn btn-primary btn-sm" onclick="showTemplates()">Templates</button>
                        </div>
                        
                        <form class="task-form" onsubmit="addTask(event)">
                            <input type="text" class="task-input" placeholder="Add a new task..." required id="taskInput">
                            <select class="task-select" id="taskSubject">
                                <option value="math">Math</option>
                                <option value="science">Science</option>
                                <option value="english">English</option>
                                <option value="history">History</option>
                            </select>
                            <select class="task-select" id="taskPriority">
                                <option value="low">Low</option>
                                <option value="medium">Medium</option>
                                <option value="high">High</option>
                            </select>
                            <input type="date" class="task-select" id="taskDue">
                            <button type="submit" class="btn btn-primary">Add</button>
                        </form>

                        <ul class="task-list" id="taskList">
                            <!-- Tasks will be populated here -->
                        </ul>
                    </div>

                    <!-- Focus Timer -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">⏰ Focus Timer</h2>
                        </div>
                        
                        <div class="timer-container">
                            <div class="timer-display" id="timerDisplay">25:00</div>
                            <div class="timer-controls">
                                <button class="btn btn-success" onclick="startTimer()" id="startBtn">Start</button>
                                <button class="btn btn-danger" onclick="pauseTimer()" id="pauseBtn">Pause</button>
                                <button class="btn btn-primary" onclick="resetTimer()">Reset</button>
                            </div>
                            <div>
                                <label>
                                    <input type="checkbox" id="linkToTask"> Link to current task
                                </label>
                            </div>
                        </div>

                        <div class="session-log">
                            <h3>Recent Sessions</h3>
                            <div id="sessionList">
                                <!-- Sessions will be populated here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Planner Page -->
            <div id="planner" class="page">
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">📅 Weekly Planner</h2>
                        <div>
                            <button class="btn btn-primary btn-sm" onclick="changeMonth(-1)">← Prev</button>
                            <span id="currentMonth">December 2024</span>
                            <button class="btn btn-primary btn-sm" onclick="changeMonth(1)">Next →</button>
                        </div>
                    </div>
                    
                    <div class="calendar" id="calendar">
                        <!-- Calendar will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Subjects Page -->
            <div id="subjects" class="page">
                <div class="grid grid-2">
                    <div class="card">
                        <h2 class="card-title">📊 Subject Progress</h2>
                        <div id="subjectStats">
                            <!-- Subject stats will be populated here -->
                        </div>
                    </div>
                    
                    <div class="card">
                        <h2 class="card-title">🎯 Habit Tracker</h2>
                        <div id="habitTracker">
                            <div class="habit-item">
                                <span>Daily Study Session</span>
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: 70%"></div>
                                </div>
                                <span>7 day streak</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Reports Page -->
            <div id="reports" class="page">
                <div class="grid grid-2">
                    <div class="card">
                        <h2 class="card-title">📈 Productivity Chart</h2>
                        <canvas id="productivityChart" width="400" height="200"></canvas>
                    </div>
                    
                    <div class="card">
                        <h2 class="card-title">📊 Subject Distribution</h2>
                        <canvas id="subjectChart" width="400" height="200"></canvas>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">📄 Export Reports</h2>
                        <button class="btn btn-primary" onclick="exportReport()">Export Weekly Report</button>
                    </div>
                    <p>Generate a comprehensive report of your study activities, completed tasks, and focus sessions.</p>
                </div>
            </div>

            <!-- Settings Page -->
            <div id="settings" class="page">
                <div class="card">
                    <h2 class="card-title">⚙️ Settings</h2>
                    
                    <div style="margin-bottom: 2rem;">
                        <h3>Theme</h3>
                        <label>
                            <input type="radio" name="theme" value="light" onchange="setTheme('light')"> Light Mode
                        </label>
                        <label style="margin-left: 1rem;">
                            <input type="radio" name="theme" value="dark" onchange="setTheme('dark')"> Dark Mode
                        </label>
                    </div>
                    
                    <div style="margin-bottom: 2rem;">
                        <h3>Focus Timer</h3>
                        <label>
                            Focus Duration: 
                            <select id="focusDuration" onchange="updateFocusDuration()">
                                <option value="25">25 minutes</option>
                                <option value="30">30 minutes</option>
                                <option value="45">45 minutes</option>
                                <option value="60">60 minutes</option>
                            </select>
                        </label>
                    </div>
                    
                    <div>
                        <h3>Data Management</h3>
                        <button class="btn btn-danger" onclick="clearAllData()">Clear All Data</button>
                        <p style="font-size: 0.875rem; color: var(--text-light); margin-top: 0.5rem;">
                            This will permanently delete all tasks, sessions, and settings.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Template Modal -->
    <div class="modal" id="templateModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>📋 Task Templates</h2>
                <button class="modal-close" onclick="closeModal('templateModal')">&times;</button>
            </div>
            <div class="grid">
                <div class="card" onclick="loadTemplate('exam')">
                    <h3>📚 Exam Preparation</h3>
                    <p>Complete study plan for upcoming exams</p>
                </div>
                <div class="card" onclick="loadTemplate('project')">
                    <h3>🎯 Project Planning</h3>
                    <p>Break down large projects into manageable tasks</p>
                </div>
                <div class="card" onclick="loadTemplate('daily')">
                    <h3>📅 Daily Study Routine</h3>
                    <p>Essential daily study habits and tasks</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Day Detail Modal -->
    <div class="modal" id="dayModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="dayModalTitle">Tasks for Today</h2>
                <button class="modal-close" onclick="closeModal('dayModal')">&times;</button>
            </div>
            <div id="dayModalContent">
                <!-- Day tasks will be populated here -->
            </div>
        </div>
    </div>

    <script>
        // Global state
        let tasks = JSON.parse(localStorage.getItem('studyhub_tasks') || '[]');
        let sessions = JSON.parse(localStorage.getItem('studyhub_sessions') || '[]');
        let settings = JSON.parse(localStorage.getItem('studyhub_settings') || '{"theme": "light", "focusDuration": 25}');
        
        let timerInterval = null;
        let timerSeconds = settings.focusDuration * 60;
        let isTimerRunning = false;
        let currentDate = new Date();

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            loadTheme();
            updateStats();
            renderTasks();
            renderSessions();
            renderCalendar();
            renderCharts();
            updateTimerDisplay();
        });

        // Navigation
        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
            document.querySelectorAll('.nav-links a').forEach(link => link.classList.remove('active'));
            
            document.getElementById(pageId).classList.add('active');
            event.target.classList.add('active');
            
            if (pageId === 'reports') {
                setTimeout(renderCharts, 100); // Delay for proper canvas rendering
            }
        }

        // Theme management
        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            setTheme(newTheme);
        }

        function setTheme(theme) {
            document.documentElement.setAttribute('data-theme', theme);
            settings.theme = theme;
            saveSettings();
            
            // Update radio buttons
            document.querySelector(`input[name="theme"][value="${theme}"]`).checked = true;
            
            // Update theme toggle button
            document.querySelector('.theme-toggle').textContent = theme === 'dark' ? '☀️' : '🌙';
        }

        function loadTheme() {
            setTheme(settings.theme);
        }

        // Task management
        function addTask(event) {
            event.preventDefault();
            
            const taskInput = document.getElementById('taskInput');
            const taskSubject = document.getElementById('taskSubject');
            const taskPriority = document.getElementById('taskPriority');
            const taskDue = document.getElementById('taskDue');
            
            const task = {
                id: Date.now(),
                text: taskInput.value,
                subject: taskSubject.value,
                priority: taskPriority.value,
                due: taskDue.value,
                completed: false,
                createdAt: new Date().toISOString()
            };
            
            tasks.push(task);
            saveTasks();
            renderTasks();
            updateStats();
            
            // Reset form
            taskInput.value = '';
            taskDue.value = '';
        }

        function toggleTask(taskId) {
            const task = tasks.find(t => t.id === taskId);
            if (task) {
                task.completed = !task.completed;
                task.completedAt = task.completed ? new Date().toISOString() : null;
                saveTasks();
                renderTasks();
                updateStats();
            }
        }

        function deleteTask(taskId) {
            tasks = tasks.filter(t => t.id !== taskId);
            saveTasks();
            renderTasks();
            updateStats();
        }

        function renderTasks() {
            const taskList = document.getElementById('taskList');
            taskList.innerHTML = '';
            
            // Sort tasks: incomplete first, then by priority, then by due date
            const sortedTasks = tasks.sort((a, b) => {
                if (a.completed !== b.completed) return a.completed - b.completed;
                
                const priorityOrder = { high: 3, medium: 2, low: 1 };
                if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
                    return priorityOrder[b.priority] - priorityOrder[a.priority];
                }
                
                if (a.due && b.due) return new Date(a.due) - new Date(b.due);
                return 0;
            });
            
            sortedTasks.forEach(task => {
                const li = document.createElement('li');
                li.className = `task-item ${task.completed ? 'completed' : ''} fade-in`;
                
                const dueDate = task.due ? new Date(task.due) : null;
                const isOverdue = dueDate && dueDate < new Date() && !task.completed;
                const daysUntilDue = dueDate ? Math.ceil((dueDate - new Date()) / (1000 * 60 * 60 * 24)) : null;
                
                li.innerHTML = `
                    <input type="checkbox" class="task-checkbox" ${task.completed ? 'checked' : ''} 
                           onchange="toggleTask(${task.id})">
                    <span class="task-text">${task.text}</span>
                    <span class="task-subject subject-${task.subject}">${task.subject}</span>
                    <span class="task-priority priority-${task.priority}">${task.priority}</span>
                    ${task.due ? `<span class="task-due ${isOverdue ? 'text-danger' : ''}">${
                        isOverdue ? 'Overdue!' : 
                        daysUntilDue === 0 ? 'Due today' :
                        daysUntilDue === 1 ? 'Due tomorrow' :
                        `${daysUntilDue} days`
                    }</span>` : ''}
                    <div class="task-actions">
                        <button class="btn btn-danger btn-sm" onclick="deleteTask(${task.id})">Delete</button>
                    </div>
                `;
                
                taskList.appendChild(li);
            });
        }

        // Timer functionality
        function startTimer() {
            if (!isTimerRunning) {
                isTimerRunning = true;
                timerInterval = setInterval(() => {
                    timerSeconds--;
                    updateTimerDisplay();
                    
                    if (timerSeconds <= 0) {
                        completeSession();
                    }
                }, 1000);
                
                document.getElementById('startBtn').textContent = 'Running...';
                document.getElementById('startBtn').disabled = true;
            }
        }

        function pauseTimer() {
            if (isTimerRunning) {
                isTimerRunning = false;
                clearInterval(timerInterval);
                document.getElementById('startBtn').textContent = 'Resume';
                document.getElementById('startBtn').disabled = false;
            }
        }

        function resetTimer() {
            isTimerRunning = false;
            clearInterval(timerInterval);
            timerSeconds = settings.focusDuration * 60;
            updateTimerDisplay();
            document.getElementById('startBtn').textContent = 'Start';
            document.getElementById('startBtn').disabled = false;
        }

        function updateTimerDisplay() {
            const minutes = Math.floor(timerSeconds / 60);
            const seconds = timerSeconds % 60;
            document.getElementById('timerDisplay').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function completeSession() {
            resetTimer();
            
            const session = {
                id: Date.now(),
                duration: settings.focusDuration,
                completedAt: new Date().toISOString(),
                linkedTask: document.getElementById('linkToTask').checked ? 
                    tasks.find(t => !t.completed)?.id : null
            };
            
            sessions.push(session);
            saveSessions();
            renderSessions();
            updateStats();
            
            // Show completion notification
            alert(`🎉 Great job! You completed a ${settings.focusDuration}-minute focus session!`);
        }

        function renderSessions() {
            const sessionList = document.getElementById('sessionList');
            const todaySessions = sessions.filter(s => {
                const sessionDate = new Date(s.completedAt);
                const today = new Date();
                return sessionDate.toDateString() === today.toDateString();
            }).slice(-5); // Show last 5 sessions
            
            sessionList.innerHTML = todaySessions.map(session => {
                const time = new Date(session.completedAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                const linkedTask = session.linkedTask ? 
                    tasks.find(t => t.id === session.linkedTask)?.text || 'Deleted task' : 
                    'General study';
                
                return `
                    <div class="session-item">
                        <span>${time} - ${session.duration}min</span>
                        <span>${linkedTask}</span>
                    </div>
                `;
            }).join('');
        }

        // Calendar functionality
        function renderCalendar() {
            const calendar = document.getElementById('calendar');
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            document.getElementById('currentMonth').textContent = 
                new Date(year, month).toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
            
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            calendar.innerHTML = '';
            
            // Add headers
            const headers = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            headers.forEach(header => {
                const div = document.createElement('div');
                div.className = 'calendar-header';
                div.textContent = header;
                calendar.appendChild(div);
            });
            
            // Add days
            for (let i = 0; i < 42; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                
                const div = document.createElement('div');
                div.className = 'calendar-day';
                
                const isCurrentMonth = date.getMonth() === month;
                const isToday = date.toDateString() === new Date().toDateString();
                const dayTasks = tasks.filter(task => 
                    task.due && new Date(task.due).toDateString() === date.toDateString()
                );
                
                if (!isCurrentMonth) div.style.opacity = '0.3';
                if (isToday) div.classList.add('today');
                if (dayTasks.length > 0) div.classList.add('has-tasks');
                
                div.innerHTML = `
                    <div class="day-number">${date.getDate()}</div>
                    <div class="day-tasks">${dayTasks.length} task${dayTasks.length !== 1 ? 's' : ''}</div>
                `;
                
                div.onclick = () => showDayDetails(date, dayTasks);
                calendar.appendChild(div);
            }
        }

        function changeMonth(direction) {
            currentDate.setMonth(currentDate.getMonth() + direction);
            renderCalendar();
        }

        function showDayDetails(date, dayTasks) {
            const modal = document.getElementById('dayModal');
            const title = document.getElementById('dayModalTitle');
            const content = document.getElementById('dayModalContent');
            
            title.textContent = `Tasks for ${date.toLocaleDateString()}`;
            
            if (dayTasks.length === 0) {
                content.innerHTML = '<p>No tasks scheduled for this day.</p>';
            } else {
                content.innerHTML = dayTasks.map(task => `
                    <div class="task-item ${task.completed ? 'completed' : ''}">
                        <span class="task-text">${task.text}</span>
                        <span class="task-subject subject-${task.subject}">${task.subject}</span>
                        <span class="task-priority priority-${task.priority}">${task.priority}</span>
                    </div>
                `).join('');
            }
            
            modal.classList.add('active');
        }

        // Statistics and charts
        function updateStats() {
            const totalTasks = tasks.length;
            const completedTasks = tasks.filter(t => t.completed).length;
            const todaySessions = sessions.filter(s => {
                const sessionDate = new Date(s.completedAt);
                const today = new Date();
                return sessionDate.toDateString() === today.toDateString();
            });
            const focusTime = todaySessions.reduce((total, s) => total + s.duration, 0);
            
            // Calculate streak (simplified)
            const streak = calculateStreak();
            
            document.getElementById('totalTasks').textContent = totalTasks;
            document.getElementById('completedTasks').textContent = completedTasks;
            document.getElementById('focusTime').textContent = `${Math.floor(focusTime / 60)}h ${focusTime % 60}m`;
            document.getElementById('streakDays').textContent = streak;
            
            // Update subject stats
            updateSubjectStats();
        }

        function calculateStreak() {
            // Simplified streak calculation - days with completed tasks
            const today = new Date();
            let streak = 0;
            
            for (let i = 0; i < 30; i++) {
                const checkDate = new Date(today);
                checkDate.setDate(today.getDate() - i);
                
                const hasActivity = tasks.some(task => 
                    task.completed && 
                    task.completedAt && 
                    new Date(task.completedAt).toDateString() === checkDate.toDateString()
                ) || sessions.some(session =>
                    new Date(session.completedAt).toDateString() === checkDate.toDateString()
                );
                
                if (hasActivity) {
                    streak++;
                } else if (i > 0) {
                    break;
                }
            }
            
            return streak;
        }

        function updateSubjectStats() {
            const subjectStats = document.getElementById('subjectStats');
            const subjects = ['math', 'science', 'english', 'history'];
            
            subjectStats.innerHTML = subjects.map(subject => {
                const subjectTasks = tasks.filter(t => t.subject === subject);
                const completed = subjectTasks.filter(t => t.completed).length;
                const total = subjectTasks.length;
                const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;
                
                return `
                    <div style="margin-bottom: 1rem;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                            <span class="task-subject subject-${subject}">${subject.charAt(0).toUpperCase() + subject.slice(1)}</span>
                            <span>${completed}/${total} (${percentage}%)</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${percentage}%"></div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function renderCharts() {
            // Productivity chart (last 7 days)
            const productivityCtx = document.getElementById('productivityChart');
            if (productivityCtx) {
                const last7Days = [];
                const focusData = [];
                const taskData = [];
                
                for (let i = 6; i >= 0; i--) {
                    const date = new Date();
                    date.setDate(date.getDate() - i);
                    last7Days.push(date.toLocaleDateString('en-US', { weekday: 'short' }));
                    
                    const dayFocus = sessions
                        .filter(s => new Date(s.completedAt).toDateString() === date.toDateString())
                        .reduce((total, s) => total + s.duration, 0);
                    focusData.push(dayFocus);
                    
                    const dayTasks = tasks.filter(t => 
                        t.completed && t.completedAt && 
                        new Date(t.completedAt).toDateString() === date.toDateString()
                    ).length;
                    taskData.push(dayTasks);
                }
                
                new Chart(productivityCtx, {
                    type: 'line',
                    data: {
                        labels: last7Days,
                        datasets: [{
                            label: 'Focus Time (minutes)',
                            data: focusData,
                            borderColor: '#6366f1',
                            backgroundColor: 'rgba(99, 102, 241, 0.1)',
                            tension: 0.4
                        }, {
                            label: 'Tasks Completed',
                            data: taskData,
                            borderColor: '#10b981',
                            backgroundColor: 'rgba(16, 185, 129, 0.1)',
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
            
            // Subject distribution chart
            const subjectCtx = document.getElementById('subjectChart');
            if (subjectCtx) {
                const subjects = ['math', 'science', 'english', 'history'];
                const subjectData = subjects.map(subject => 
                    tasks.filter(t => t.subject === subject && t.completed).length
                );
                
                new Chart(subjectCtx, {
                    type: 'doughnut',
                    data: {
                        labels: subjects.map(s => s.charAt(0).toUpperCase() + s.slice(1)),
                        datasets: [{
                            data: subjectData,
                            backgroundColor: [
                                '#7c3aed',
                                '#16a34a',
                                '#d97706',
                                '#dc2626'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom',
                            }
                        }
                    }
                });
            }
        }

        // Templates
        function showTemplates() {
            document.getElementById('templateModal').classList.add('active');
        }

        function loadTemplate(templateType) {
            const templates = {
                exam: [
                    { text: 'Review chapter notes', subject: 'math', priority: 'high' },
                    { text: 'Complete practice problems', subject: 'math', priority: 'high' },
                    { text: 'Create study guide', subject: 'math', priority: 'medium' },
                    { text: 'Schedule study group', subject: 'math', priority: 'low' }
                ],
                project: [
                    { text: 'Research topic', subject: 'english', priority: 'high' },
                    { text: 'Create outline', subject: 'english', priority: 'high' },
                    { text: 'Write first draft', subject: 'english', priority: 'medium' },
                    { text: 'Review and edit', subject: 'english', priority: 'medium' },
                    { text: 'Final submission', subject: 'english', priority: 'high' }
                ],
                daily: [
                    { text: 'Review yesterday\'s notes', subject: 'science', priority: 'medium' },
                    { text: 'Complete homework assignments', subject: 'math', priority: 'high' },
                    { text: 'Read assigned chapters', subject: 'history', priority: 'medium' },
                    { text: 'Practice vocabulary', subject: 'english', priority: 'low' }
                ]
            };
            
            const templateTasks = templates[templateType] || [];
            templateTasks.forEach(template => {
                const task = {
                    id: Date.now() + Math.random(),
                    text: template.text,
                    subject: template.subject,
                    priority: template.priority,
                    due: '',
                    completed: false,
                    createdAt: new Date().toISOString()
                };
                tasks.push(task);
            });
            
            saveTasks();
            renderTasks();
            updateStats();
            closeModal('templateModal');
        }

        // Export functionality
        function exportReport() {
            const today = new Date();
            const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            const weeklyTasks = tasks.filter(t => 
                new Date(t.createdAt) >= weekAgo
            );
            const weeklySessions = sessions.filter(s => 
                new Date(s.completedAt) >= weekAgo
            );
            
            const report = `
StudyHub Pro - Weekly Report
Generated: ${today.toLocaleDateString()}

TASK SUMMARY
============
Total tasks created: ${weeklyTasks.length}
Tasks completed: ${weeklyTasks.filter(t => t.completed).length}
Completion rate: ${weeklyTasks.length > 0 ? Math.round((weeklyTasks.filter(t => t.completed).length / weeklyTasks.length) * 100) : 0}%

FOCUS SESSIONS
==============
Total sessions: ${weeklySessions.length}
Total focus time: ${weeklySessions.reduce((total, s) => total + s.duration, 0)} minutes
Average session: ${weeklySessions.length > 0 ? Math.round(weeklySessions.reduce((total, s) => total + s.duration, 0) / weeklySessions.length) : 0} minutes

SUBJECT BREAKDOWN
=================
${['math', 'science', 'english', 'history'].map(subject => {
    const subjectTasks = weeklyTasks.filter(t => t.subject === subject);
    const completed = subjectTasks.filter(t => t.completed).length;
    return `${subject.charAt(0).toUpperCase() + subject.slice(1)}: ${completed}/${subjectTasks.length} completed`;
}).join('\n')}

COMPLETED TASKS
===============
${weeklyTasks.filter(t => t.completed).map(t => 
    `✓ ${t.text} (${t.subject}, ${t.priority} priority)`
).join('\n')}

PENDING TASKS
=============
${weeklyTasks.filter(t => !t.completed).map(t => 
    `○ ${t.text} (${t.subject}, ${t.priority} priority)${t.due ? ` - Due: ${t.due}` : ''}`
).join('\n')}
            `.trim();
            
            const blob = new Blob([report], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `StudyHub-Report-${today.toISOString().split('T')[0]}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Settings
        function updateFocusDuration() {
            const duration = parseInt(document.getElementById('focusDuration').value);
            settings.focusDuration = duration;
            saveSettings();
            resetTimer();
        }

        function clearAllData() {
            if (confirm('Are you sure you want to clear all data? This cannot be undone.')) {
                tasks = [];
                sessions = [];
                localStorage.removeItem('studyhub_tasks');
                localStorage.removeItem('studyhub_sessions');
                renderTasks();
                renderSessions();
                updateStats();
                renderCalendar();
                alert('All data has been cleared.');
            }
        }

        // Modal management
        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }

        // Close modals when clicking outside
        document.addEventListener('click', function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.classList.remove('active');
            }
        });

        // Data persistence
        function saveTasks() {
            localStorage.setItem('studyhub_tasks', JSON.stringify(tasks));
        }

        function saveSessions() {
            localStorage.setItem('studyhub_sessions', JSON.stringify(sessions));
        }

        function saveSettings() {
            localStorage.setItem('studyhub_settings', JSON.stringify(settings));
        }

        // Initialize focus duration setting
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('focusDuration').value = settings.focusDuration;
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'981acfde806173dc',t:'MTc1ODMwMzAzNy4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
